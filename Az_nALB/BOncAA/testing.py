# -*- coding: utf-8 -*-
"""testing.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/github/Kimmel-Lab/ncPPI/blob/5c3681b3ddb6f02471cf0ebff165b8e0bc777517/BOncAA/testing.ipynb

# Workflow:
## Goal: Optimize (minimize) the ddG or REU value for a single ncaa incorporation
### Input Parameter: Sequence position, 3d coordinate position, Avoid coordinate positions
### Optimization function: Rosetta Mutate and Relax protocol
### Acquisition: Sequence position (distant on a 1D level), 3d coordinate position(distant on a 3D level), Avoidance positions (distance on a 3D level from binding), Surface exposure

# Input Preparations
"""

from rosetta import *
from pyrosetta import *
init('-mute all')

protein_path = '../BOncAA/nALB_bound.pdb'
complexed = pose_from_file(protein_path)

target_chain_letter = 'B'

'''Get the sequence (1D representation of the protein)'''
target = Pose()
target_chain = complexed.split_by_chain()[2]
target.assign(target_chain)

target_sequence = target.sequence()

'''Get the 3D coordinates of the Target'''

def coordinates(target):
    coordinates = []
    for i in range(1, target.size()+1):
        residue = target.residue(i)
        if residue.has("CA"):
            ca_res = residue.xyz("CA")
            coordinates.append([ca_res.x, ca_res.y, ca_res.z])
    return coordinates

coords = coordinates(target)

def binding_coordinates(target, binding_region):
    binding_coordinates = []
    non_binding_coordiantes = []
    for i in range(1,target.size()+1):
        residue = target.residue(i)
        if residue.has("CA") and i in binding_region:
            ca_res = residue.xyz("CA")
            binding_coordinates.append([ca_res.x, ca_res.y, ca_res.z])
        else:
            ca_res = residue.xyz("CA")
            non_binding_coordiantes.append([ca_res.x, ca_res.y, ca_res.z])
    return binding_coordinates

b_coordinates = binding_coordinates(target, [1,2,3,4,5,6,7])

def distance_to_binding(coordinates, binding_coordinates)

def bayesian_optimization()